#!/bin/sh
remote_name="$1"
remote_url="$2"

# Only act on GitHub URLs.
echo "$remote_url" | grep -q "github.com"
if [ $? -ne 0 ]; then
    # Not a GitHub URL â€“ skip the check.
    exit 0
fi

# Extract "owner/repo" from SSH or HTTPS URL formats.
if echo "$remote_url" | grep -q "^git@"; then
    # Format: git@github.com:owner/repo.git
    owner_repo=$(echo "$remote_url" | sed -n 's/^git@github\.com:\(.*\)\.git$/\1/p')
else
    # Format: https://github.com/owner/repo.git
    owner_repo=$(echo "$remote_url" | sed -n 's#^https://github\.com/\(.*\)\.git$#\1#p')
fi

if [ -z "$owner_repo" ]; then
    echo "Error: Unable to parse repository information from URL: $remote_url"
    exit 1
fi

owner=$(echo "$owner_repo" | cut -d/ -f1)
repo=$(echo "$owner_repo" | cut -d/ -f2)

# Query the GitHub API for repository details without authentication.
api_url="https://api.github.com/repos/$owner/$repo"

# Get the HTTP status code.
http_status=$(curl --noproxy -s -o /dev/null -w "%{http_code}" "$api_url")

if [ "$http_status" = "200" ]; then
    echo "ERROR: Push aborted. '$owner_repo' is a public repository and pushing is not allowed."
    exit 1
else
    echo "Push allowed: '$owner_repo' appears to be private (or not accessible anonymously)."
    exit 0
fi